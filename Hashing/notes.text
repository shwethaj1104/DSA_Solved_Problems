hashing: pre storing/fetching
let's say we ahve an array [1,3,2,4,5,2,1,3,2]
we have to find how many 1's, 2's,3's...etc are present in the array, for thsi we have seen brute force approach in first coding of findCountOfN.js
for finding single number appearance w eahev to loop the array n times
for finding x number of numbers presence in array we hjave to loop the array bigo(x*n) times
so let's say n=10 power 10
so 10 power 8 takes 1second to process
then 10 power 10 takes 100 seconds to process--which is not acceptable

so we use hashing here
---------------------number hashing------------------------
let's create a hash array [0,2,3,2,1,1,........]
         appearance of     0 1 2 3 4 5......
so we loop the array once and and keep increasing count of respective array element's count in the hash map
after that when ever we have to get number of appearnces of any number, we no need to loop the array again, we just have to fetch it from hash array
like hashArray[n] --> this will return the number of times n appearnces

but while allocating memory for hash array we must eb carefull bcz the max size is 10 power 6



----------character hashing-------------------
we have to map the alphabets to it's correspondent ascii value
a-97
b-98
....
z=122

a-a=0
b-a=1
c-a=2....
hash[input[i]-'a']--> woill point to it's respective index in hash array---for lower case alphabets only
hash[input[i]]--> for both upper and lower case


----map---------
in hashing to find 1,2,3,12 we need hash of size 12
but in map to find same numbers we only need map array of size 4

for 10 power 7 how does the map works then? and the hash array size we can create is striclt 10--gicen condition
we use different methods for that---division method
division method---> 1,3,78,456
we modulate input[i]%10 we get-->1,3,8,6 so we increment count of these numbers and while we want to retrieve->
if we want 1---?hashArray[input[i]%10]->hashArray[1%10]-->hashArray[1]

next scenario is what if we have same reminders numbers---> 1,16,18,14,28,56,58,28,38--> collision happens in here
so we store it following order
0->
1->1
2->
3->
4->14
5->
6->16,56
7->
8->18,28,insert 28,insert 38,58
9->
above is done using linked list in sorted order and we ahve many binary saerch algo where we can get number of 28's at 8th index--> which also takes min time


if we have array of 8,18,28,38-----100000000008
then all the num bers are gonna save on to hash index of 8, where the collision occurs and it will be again time takinmg to find a single number's count